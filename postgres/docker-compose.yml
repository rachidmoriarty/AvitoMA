version: '2'

services:
  postgresql-master:
    image: 'bitnami/postgresql:12'

    container_name: postgresql-master
    ports:
      - '5432'
    volumes:
      - 'postgresql_master_data:/bitnami/postgresql'
    
    depends_on:
      - registrator

    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=postgres
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_DATABASE=my_database
      - ALLOW_EMPTY_PASSWORD=yes
  postgresql-slave:
    image: 'bitnami/postgresql:12'
    container_name: postgresql-slave
    ports:
      - '5432'
    depends_on:
      - postgresql-master
    environment:
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_MASTER_HOST=postgresql-master
      - POSTGRESQL_PASSWORD=my_password
      - POSTGRESQL_MASTER_PORT_NUMBER=5432
      - ALLOW_EMPTY_PASSWORD=yes

  registrator:
    image: gliderlabs/registrator:latest
   # build: ./registrator
   # container_name: registrator
    environment: # Pass environment variables to the service
       ETCD_PORT: 2379
       ETCD_HOST: 167.114.129.188
    # Tell registrator where the etcd HTTP API is and to use
    # the docker VM's IP
    command: ["-ip", "$HOST_IP", "etcd://167.114.129.188:2379/"]
    volumes:
     # So registrator can use the docker API to inspect containers
    - "/var/run/docker.sock:/tmp/docker.sock"

volumes:
  postgresql_master_data:
    driver: local
